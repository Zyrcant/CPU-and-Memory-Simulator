#include <iostream>
#include <fstream>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
int main(int argc, char **argv)
{

  //pipe to communicate between memory and parent
  int pipes[2];
  pipe(pipes);

  //fork process for memory
  pid_t childpid;
  childpid=fork();
  if(childpid == -1)
  {
    perror("Eror creating a child process");
    exit(-1);
  }
  if(childpid == 0)
  {
    //memory
    int mem[2000];
 
    //initialize memory 
    std::ifstream inFile;
    inFile.open(argv[1]); 
    int added;
    std::string rest;
    int position = 0;
    while(inFile >> added) 
    {
      mem[position++] = added;
      std::getline(inFile, rest);
    }
    char instruc[30];
    read(pipes[0], instruc, sizeof(instruc));
    std::cout<<"Received " << instruc << std::endl;
    if(instruc[0] == 'r')
    {
      int i = mem[0];
      write(pipes[1], "4", 2);
    }
    close(pipes[1]);
    close(pipes[0]); 
    exit(0);
  }
    int pc = 0;
    int sp = 0;
    int ir = 0;
    int ac = 0;
    int x = 0;
    int y = 0;
    //start CPU by requesting instruction from memory
    write(pipes[1], "r 0", 4);
    char test[30];
    read(pipes[0], test, sizeof(ir));
    std::cout<<test<<std::endl;

    //close
    close(pipes[1]);
    close(pipes[0]);
    waitpid(-1, NULL, 0);
    return(0);
}
